// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingWebsite.Models;

namespace TrainingWebsite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200403140024_NotesAddedOnProducts")]
    partial class NotesAddedOnProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TrainingWebsite.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProductsOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("categoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ImageThumbnailUrl = "pic-5.jpg",
                            ImageUrl = "pic-5.jpg",
                            InStock = true,
                            IsProductsOfTheWeek = true,
                            LongDescription = " Choose your color, choose your style and your message and we will create it for your perfect gift",
                            Price = 0m,
                            ProductName = "Personalised Baby Vest",
                            ShortDescription = "Create your own personalised baby vest",
                            categoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ImageThumbnailUrl = "pic-2.jpg",
                            ImageUrl = "pic-2.jpg",
                            InStock = true,
                            IsProductsOfTheWeek = true,
                            LongDescription = " Choose your color, choose your style and your message and we will create it for your perfect gift",
                            Price = 0m,
                            ProductName = "Personalised Make-up Bag",
                            ShortDescription = "Create your own personalised Make-up bag",
                            categoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            ImageThumbnailUrl = "pic-3.jpg",
                            ImageUrl = "pic-3.jpg",
                            InStock = true,
                            IsProductsOfTheWeek = true,
                            LongDescription = " Choose your color, choose your style and your message and we will create it for your perfect gift",
                            Price = 0m,
                            ProductName = "Personalised Water Bottle",
                            ShortDescription = "Create your own personalised Water Bottle",
                            categoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            ImageThumbnailUrl = "pic-1.jpg",
                            ImageUrl = "pic-1.jpg",
                            InStock = true,
                            IsProductsOfTheWeek = true,
                            LongDescription = " Choose your color, choose your style and your message and we will create it for your perfect gift",
                            Price = 0m,
                            ProductName = "Personalised Container",
                            ShortDescription = "Create your own personalised Containers",
                            categoryId = 2
                        });
                });

            modelBuilder.Entity("TrainingWebsite.Models.ViewModels.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Personalised Clothing",
                            Description = "Personalise Any Item of clothing for any occasion"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Personalised Soft Toys",
                            Description = "Personalise Any Soft Toy for any occasion"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Personalised Storage",
                            Description = "Personalise Any Item of storage for any item"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Personalised Ornaments",
                            Description = "Personalise Any Ornament for any occasion"
                        });
                });

            modelBuilder.Entity("TrainingWebsite.Models.Products", b =>
                {
                    b.HasOne("TrainingWebsite.Models.ViewModels.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
